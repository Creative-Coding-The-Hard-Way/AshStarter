#version 460
#extension GL_ARB_separate_shader_objects: enable

layout (constant_id=1) const int execution_sixe_x = 32;
layout (local_size_x_id = 1) in;

struct Particle {
  vec2 pos;
  vec2 vel;
  vec4 color;
};

layout(binding = 0) uniform SimulationConfig {
    vec2 dimensions;
} config;

layout(std430, binding = 1) buffer SBO {
    Particle particles[];
} sbo;

layout(push_constant) uniform IntegrationConstants {
  // The integration timestep.
  float dt;
} ic;

void main() {
    uint particle_count = sbo.particles.length();

    // Current SSBO index
    uint index = gl_GlobalInvocationID.x;
    if (index >= particle_count) {
        return;
    }

    Particle particle = sbo.particles[index];

    // ------------------
    // Integrate particle position and velocity.

    particle.pos += ic.dt*particle.vel;

    // ---------------------------
    // Enforce boundary conditions

    float right = config.dimensions.x / 2.0;
    float left = -right;
    if (particle.pos.x >= right) {
        particle.pos.x = right * 2 - particle.pos.x;
        particle.vel.x = -particle.vel.x;
    } else if (particle.pos.x <= left) {
        particle.pos.x = left * 2 - particle.pos.x;
        particle.vel.x = -particle.vel.x;
    }

    float top = config.dimensions.y / 2.0;
    float bottom = -top;
    if (particle.pos.y >= top) {
        particle.pos.y = top * 2 - particle.pos.y;
        particle.vel.y = -particle.vel.y;
    } else if (particle.pos.y <= bottom) {
        particle.pos.y = bottom * 2 - particle.pos.y;
        particle.vel.y = -particle.vel.y;
    }

    // ------------------------------------------
    // Write the updated particle into the buffer
    sbo.particles[index] = particle;
}

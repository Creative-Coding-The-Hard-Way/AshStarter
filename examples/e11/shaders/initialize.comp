#version 460
#extension GL_ARB_separate_shader_objects: enable
#define PI 3.1415926

layout (constant_id=1) const int execution_sixe_x = 64;
layout (local_size_x_id = 1) in;

struct Particle {
  vec2 pos;
  vec2 vel;
};

layout(binding = 0) uniform SimulationConfig {
    vec2 dimensions;
    uint particle_count;
} config;

layout(std430, binding = 1) readonly buffer ReadSBO {
    Particle particles[];
} read_sbo;

layout(std430, binding = 2) buffer WriteSBO {
    Particle particles[];
} write_sbo;

void main() {
    for (int i = 0; i < 32; i++) {
        uint index = (gl_GlobalInvocationID.x * 32) + i;
        if (index >= config.particle_count) {
            return;
        }
        float index_norm = float(index) / float(config.particle_count);
        float angle = index_norm * (13.0 * 2.0) * PI;
        float radius = config.dimensions.y * 0.5 * index_norm;

        Particle particle;
        particle.pos = radius * vec2(cos(angle), sin(angle));
        particle.vel = vec2(0.0, 0.0);
        write_sbo.particles[index] = particle;
    }
}
